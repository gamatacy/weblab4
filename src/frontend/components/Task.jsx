import React from 'react';
import "../styles/index.css"
const Task = ({callback, ...props}) => {

    return (
        <div className="task">
            <h1 className="text-center mb-3">Лабораторная работа 4 <br/> по <nobr>веб-программированию </nobr></h1>
            <h2 className="pt-3 border-top border-2">Переписать приложение из предыдущей лабораторной работы с использованием следующих технологий:</h2>
            <ul>
                <li>Уровень back-end должен быть основан на Spring</li>
                <li>Уровень front-end должен быть построен на Angular 2+ с использованием набора компонентов PrimeNG</li>
                <li>Взаимодействие между уровнями back-end и front-end должно быть организовано посредством REST API</li>
                <li>Приложение по-прежнему должно включать в себя 2 страницы - стартовую и основную страницу приложения</li>
            </ul>
            <h3>Обе страницы приложения должны быть адаптированы для отображения в 3 режимах:</h3>
            <ul>
                <li> "Десктопный" - для устройств, ширина экрана которых равна или превышает 1114 пикселей</li>
                <li>"Планшетный" - для устройств, ширина экрана которых равна или превышает 891, но меньше 1114 пикселей</li>
                <li>"Мобильный"- для устройств, ширина экрана которых меньше 891 пикселей</li>
            </ul>
            <h3>Стартовая страница должна содержать следующие элементы:</h3>
            <ul>
                <li>"Шапку", содержащую ФИО студента, номер группы и номер варианта</li>
                <li>Форму для ввода логина и пароля. Информация о зарегистрированных в системе пользователях должна храниться в отдельной таблице БД (пароль должен храниться в виде хэш-суммы). Доступ неавторизованных пользователей к основной странице приложения должен быть запрещён.</li>
            </ul>
            <h3>Основная страница приложения должна содержать следующие элементы:</h3>
            <ul>
                <li>Набор полей ввода для задания координат точки и радиуса области в соответствии с вариантом задания: Text (-3 ... 3) для координаты по оси X, Slider (-3 ... 5) для координаты по оси Y, и Text (-3 ... 3) для задания радиуса области. Если поле ввода допускает ввод заведомо некорректных данных (таких, например, как буквы в координатах точки или отрицательный радиус), то приложение должно осуществлять их валидацию</li>
                <li>Динамически обновляемую картинку, изображающую область на координатной плоскости в соответствии с номером варианта и точки, координаты которых были заданы пользователем. Клик по картинке должен инициировать сценарий, осуществляющий определение координат новой точки и отправку их на сервер для проверки её попадания в область. Цвет точек должен зависить от факта попадания / непопадания в область. Смена радиуса также должна инициировать перерисовку картинки.</li><li>Таблицу со списком результатов предыдущих проверок</li>
                <li>Ссылку, по которой аутентифицированный пользователь может закрыть свою сессию и вернуться на стартовую страницу приложения</li>
            </ul>
            <h3>Дополнительные требования к приложению:</h3>
            <ul>
                <li>Все результаты проверки должны сохраняться в базе данных под управлением СУБД PostgreSQL</li>
                <li>Для доступа к БД необходимо использовать Spring Data</li>
            </ul>
            <div className="d-flex">
                <button style={{marginTop: 50}} onClick={callback} className="submit-btn mx-auto content-block fs-5">Hide task</button>
            </div>
        </div>
    );
};

export default Task;